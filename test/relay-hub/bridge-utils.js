const eth = require('ethereumjs-util')
const rlp = require('rlp')
const Web3 = require('web3');

/** @var web3 {Web3} */

const SIMPLE_TOKEN_TEMPLATE_BYTECODE = "0x60806040523480156200001157600080fd5b5060408051602080820180845260008084528451928301909452928152815191929091620000429160039162000061565b5080516200005890600490602084019062000061565b50505062000143565b8280546200006f9062000107565b90600052602060002090601f016020900481019282620000935760008555620000de565b82601f10620000ae57805160ff1916838001178555620000de565b82800160010185558215620000de579182015b82811115620000de578251825591602001919060010190620000c1565b50620000ec929150620000f0565b5090565b5b80821115620000ec5760008155600101620000f1565b600181811c908216806200011c57607f821691505b6020821081036200013d57634e487b7160e01b600052602260045260246000fd5b50919050565b610cff80620001536000396000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c806306fdde03146100ca578063095ea7b3146100e857806318160ddd1461010b57806323b872dd1461011d578063313ce56714610130578063395093511461013f57806340c10f191461015257806358b917fd1461016757806370a082311461017a57806395d89b41146101a35780639dc29fac146101ab578063a457c2d7146101be578063a9059cbb146101d1578063dd62ed3e146101e4578063df1f29ee1461021d575b600080fd5b6100d2610240565b6040516100df9190610a84565b60405180910390f35b6100fb6100f6366004610af5565b610252565b60405190151581526020016100df565b6002545b6040519081526020016100df565b6100fb61012b366004610b1f565b610268565b604051601281526020016100df565b6100fb61014d366004610af5565b610317565b610165610160366004610af5565b610353565b005b610165610175366004610b5b565b61038b565b61010f610188366004610b9a565b6001600160a01b031660009081526020819052604090205490565b6100d26103e0565b6101656101b9366004610af5565b6103ed565b6100fb6101cc366004610af5565b610421565b6100fb6101df366004610af5565b6104ba565b61010f6101f2366004610bbc565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600954600854604080519283526001600160a01b039091166020830152016100df565b606061024d6006546104c7565b905090565b600061025f3384846105a1565b50600192915050565b60006102758484846106c6565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156102ff5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61030c85338584036105a1565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161025f91859061034e908690610c05565b6105a1565b6007546001600160a01b0316331461037d5760405162461bcd60e51b81526004016102f690610c1d565b6103878282610883565b5050565b6007546001600160a01b0316156103a157600080fd5b60078054336001600160a01b031991821617909155600594909455600692909255600880549093166001600160a01b0390921691909117909155600955565b606061024d6005546104c7565b6007546001600160a01b031633146104175760405162461bcd60e51b81526004016102f690610c1d565b6103878282610950565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104a35760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102f6565b6104b033858584036105a1565b5060019392505050565b600061025f3384846106c6565b606060008290036104e657505060408051600081526020810190915290565b600060105b60ff81161561053d57836104ff8284610c57565b60ff166020811061051257610512610c7c565b1a60f81b6001600160f81b031916156105325761052f8183610c57565b91505b60011c607f166104eb565b50600061054b826001610c57565b60ff1667ffffffffffffffff81111561056657610566610c41565b6040519080825280601f01601f191660200182016040528015610590576020820181803683370190505b506020810194909452509192915050565b6001600160a01b0383166106035760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102f6565b6001600160a01b0382166106645760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102f6565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661072a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102f6565b6001600160a01b03821661078c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102f6565b6001600160a01b038316600090815260208190526040902054818110156108045760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102f6565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061083b908490610c05565b92505081905550826001600160a01b0316846001600160a01b0316600080516020610caa8339815191528460405161087591815260200190565b60405180910390a350505050565b6001600160a01b0382166108d95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016102f6565b80600260008282546108eb9190610c05565b90915550506001600160a01b03821660009081526020819052604081208054839290610918908490610c05565b90915550506040518181526001600160a01b03831690600090600080516020610caa8339815191529060200160405180910390a35050565b6001600160a01b0382166109b05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016102f6565b6001600160a01b03821660009081526020819052604090205481811015610a245760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016102f6565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610a53908490610c92565b90915550506040518281526000906001600160a01b03851690600080516020610caa833981519152906020016106b9565b600060208083528351808285015260005b81811015610ab157858101830151858201604001528201610a95565b81811115610ac3576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610af057600080fd5b919050565b60008060408385031215610b0857600080fd5b610b1183610ad9565b946020939093013593505050565b600080600060608486031215610b3457600080fd5b610b3d84610ad9565b9250610b4b60208501610ad9565b9150604084013590509250925092565b60008060008060808587031215610b7157600080fd5b843593506020850135925060408501359150610b8f60608601610ad9565b905092959194509250565b600060208284031215610bac57600080fd5b610bb582610ad9565b9392505050565b60008060408385031215610bcf57600080fd5b610bd883610ad9565b9150610be660208401610ad9565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610c1857610c18610bef565b500190565b6020808252600a908201526937b7363c9037bbb732b960b11b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b600060ff821660ff84168060ff03821115610c7457610c74610bef565b019392505050565b634e487b7160e01b600052603260045260246000fd5b600082821015610ca457610ca4610bef565b50039056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212204099680eba4ada9f19c860cd82eff1a572fb17b5161f4877d2f7cffda4ed82f764736f6c634300080e0033";
const SIMPLE_TOKEN_PROXY_BYTECODE = "0x608060405234801561001057600080fd5b50610201806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c4d66de8146100f0575b60008061005960017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5161014d565b60001b9050805491506000826001600160a01b031663709bc7f36040518163ffffffff1660e01b81526004016020604051808303816000875af11580156100a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c8919061018a565b90503660008037600080366000845af43d6000803e8080156100e9573d6000f35b3d6000fd5b005b6100ee6100fe3660046101ae565b60008061012c60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5161014d565b8054925090506001600160a01b0382161561014657600080fd5b9190915550565b60008282101561016d57634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b038116811461018757600080fd5b50565b60006020828403121561019c57600080fd5b81516101a781610172565b9392505050565b6000602082840312156101c057600080fd5b81356101a78161017256fea264697066735822122026980f98413972a638a35a295225f3176c9e819673861c3c27b6ec8751bbe06864736f6c634300080e0033";

function operatorByNetwork(networkName) {
  const operatorByNetwork = {
    // BSC
    'smartchaintestnet': '0x256e78f10eE9897bda1c36C30471A2b3c8aE5186',
    'smartchain': '0x4069D8A3dE3A72EcA86CA5e0a4B94619085E7362',
    // ETH
    'goerli': '0x256e78f10eE9897bda1c36C30471A2b3c8aE5186',
    'mainnet': '0x4069D8A3dE3A72EcA86CA5e0a4B94619085E7362',
    // polygon
    'polygontestnet': '0x256e78f10eE9897bda1c36C30471A2b3c8aE5186',
    'polygon': '0x4069D8A3dE3A72EcA86CA5e0a4B94619085E7362',
    // unit tests
    'test': '0x256e78f10eE9897bda1c36C30471A2b3c8aE5186',
    'soliditycoverage': '0x256e78f10eE9897bda1c36C30471A2b3c8aE5186',
    'ganache': '0x256e78f10eE9897bda1c36C30471A2b3c8aE5186',
  };
  const operatorAddress = operatorByNetwork[networkName]
  if (!operatorAddress) throw new Error(`Operator doesn't exist for network ${networkName}`)
  return operatorAddress;
}

function nameAndSymbolByNetwork(networkName) {
  const networks = {
    // BSC
    'smartchaintestnet': {name: 'BNB', symbol: 'BNB'},
    'smartchain': {name: 'BNB', symbol: 'BNB'},
    // ETH
    'goerli': {name: 'Ethereum', symbol: 'ETH'},
    'mainnet': {name: 'Ethereum', symbol: 'ETH'},
    // polygon
    'polygontestnet': {name: 'Matic Token', symbol: 'MATIC'},
    'polygon': {name: 'Matic Token', symbol: 'MATIC'},
    // unit tests
    'test': {name: 'Ethereum', symbol: 'ETH'},
    'soliditycoverage': {name: 'Ethereum', symbol: 'ETH'},
    'ganache': {name: 'Ethereum', symbol: 'ETH'},
  };
  if (!networks[networkName]) throw new Error(`Unknown network ${networkName}`);
  return networks[networkName];
}

function nativeAddressByNetwork(networkName) {
  function nativeHash(str) {
    return '0x' + eth.keccak256(Buffer.from(str, 'utf8')).slice(0, 20).toString('hex');
  }

  const {symbol} = nameAndSymbolByNetwork(networkName);
  return nativeHash(`CrossChainBridge:${symbol}`);
}

function simpleTokenTemplateAddress(deployer) {
  if (deployer.startsWith('0x')) {
    deployer = deployer.substr(2);
  }
  let salt = eth.keccak256(Buffer.from('SimpleTokenTemplateV1', 'utf8')).toString('hex')
  if (salt.startsWith('0x')) {
    salt = salt.substr(2);
  }
  const byteCodeHash = eth.keccak256(eth.toBuffer(SIMPLE_TOKEN_TEMPLATE_BYTECODE));
  const newAddress = eth.keccak256(eth.toBuffer([
    '0xff',
    deployer,
    web3.utils.padRight(salt, 64),
    byteCodeHash.toString('hex')
  ].join('')));
  return `0x${newAddress.toString('hex').substr(24)}`;
}

function simpleTokenProxyAddress(deployer, salt) {
  if (deployer.startsWith('0x')) {
    deployer = deployer.substr(2);
  }
  if (salt.startsWith('0x')) {
    salt = salt.substr(2);
  }
  const byteCodeHash = eth.keccak256(eth.toBuffer(SIMPLE_TOKEN_PROXY_BYTECODE));
  const newAddress = eth.keccak256(eth.toBuffer([
    '0xff',
    deployer,
    web3.utils.padRight(salt, 64),
    byteCodeHash.toString('hex')
  ].join('')));
  return `0x${newAddress.toString('hex').substr(24)}`;
}

function createSimpleTokenMetaData(symbol, name, chain, origin) {
  return [
    web3.eth.abi.encodeParameter('bytes32', web3.utils.asciiToHex(symbol)),
    web3.eth.abi.encodeParameter('bytes32', web3.utils.asciiToHex(name)),
    chain,
    origin
  ];
}

function encodeTransactionReceipt(txReceipt) {
  const rlpLogs = txReceipt.rawLogs.map(log => {
    return [
      // address
      log.address,
      // topics
      log.topics,
      // data
      new Buffer(log.data.substr(2), 'hex'),
    ];
  });
  const rlpReceipt = [
    // postStateOrStatus
    Number(txReceipt.status),
    // cumulativeGasUsed
    Web3.utils.numberToHex(txReceipt.gasUsed),
    // bloom
    txReceipt.logsBloom,
    // logs
    rlpLogs,
  ];
  const encodedReceipt = rlp.encode(rlpReceipt),
    receiptHash = eth.keccak256(encodedReceipt);
  return [`0x${encodedReceipt.toString('hex')}`, `0x${receiptHash.toString('hex')}`];
}

function encodeProof(chainId, status, txHash, blockNumber, blockHash, txIndex, receiptHash, amount) {
  const proofData = Buffer.concat([
    new Buffer(web3.eth.abi.encodeParameters(['uint256', 'uint256'], [chainId, status]).substr(2), 'hex'),
    new Buffer(txHash.substr(2), 'hex'),
    new Buffer(blockNumber.substr(2), 'hex'),
    new Buffer(blockHash.substr(2), 'hex'),
    new Buffer(txIndex.substr(2), 'hex'),
    new Buffer(receiptHash.substr(2), 'hex'),
    new Buffer(amount.substr(2), 'hex'),
  ]);
  const encodedProof = Buffer.concat([
      new Buffer(web3.eth.abi.encodeParameters(['uint256'], [chainId]).substr(2), 'hex'),
      new Buffer(txHash.substr(2), 'hex'),
      new Buffer(blockNumber.substr(2), 'hex'),
      new Buffer(blockHash.substr(2), 'hex'),
      new Buffer(txIndex.substr(2), 'hex'),
      new Buffer(amount.substr(2), 'hex'),
    ]),
    proofHash = eth.keccak256(proofData);
  return [`0x${encodedProof.toString('hex')}`, `0x${proofHash.toString('hex')}`];
}

module.exports = {
  createSimpleTokenMetaData,
  operatorByNetwork,
  nameAndSymbolByNetwork,
  nativeAddressByNetwork,
  simpleTokenProxyAddress,
  encodeTransactionReceipt,
  encodeProof,
};
