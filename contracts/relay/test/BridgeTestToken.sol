// SPDX-License-Identifier: GPL-3.0-only
pragma solidity ^0.8.6;

import "../SimpleToken.sol";

contract TestToken is SimpleToken {

    constructor() SimpleToken() {
        initialize(
            0x5465535400000000000000000000000000000000000000000000000000000000, // TeST
            0x5465737420546F6B656E00000000000000000000000000000000000000000000, // Test Token
            block.chainid,
            address(this)
        );
    }

    modifier onlyOwner() override {
        _;
    }
}

contract TestTokenFactory {
    address private _template;
    constructor() {
        _template = TestTokenFactoryUtils.deployTestTokenTemplate(this);
    }

    function getImplementation() public view returns (address) {
        return _template;
    }
}

library TestTokenFactoryUtils {

    bytes32 constant internal TEST_TOKEN_TEMPLATE_SALT = keccak256("TestTokenTemplateV0.1");

    bytes constant internal TEST_TOKEN_TEMPLATE_BYTECODE = hex"60806040523480156200001157600080fd5b50604080516020808201808452600080845284519283019094529281528151919290916200004291600391620000db565b50805162000058906004906020840190620000db565b506200007f915063151954d560e21b9050692a32b9ba102a37b5b2b760b11b463062000085565b620001bd565b6007546001600160a01b0316156200009c57600080fd5b60078054336001600160a01b031991821617909155600594909455600692909255600880549093166001600160a01b0390921691909117909155600955565b828054620000e99062000181565b90600052602060002090601f0160209004810192826200010d576000855562000158565b82601f106200012857805160ff191683800117855562000158565b8280016001018555821562000158579182015b82811115620001585782518255916020019190600101906200013b565b50620001669291506200016a565b5090565b5b808211156200016657600081556001016200016b565b600181811c908216806200019657607f821691505b602082108103620001b757634e487b7160e01b600052602260045260246000fd5b50919050565b610c8780620001cd6000396000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c806306fdde03146100ca578063095ea7b3146100e857806318160ddd1461010b57806323b872dd1461011d578063313ce56714610130578063395093511461013f57806340c10f191461015257806358b917fd1461016757806370a082311461017a57806395d89b41146101a35780639dc29fac146101ab578063a457c2d7146101be578063a9059cbb146101d1578063dd62ed3e146101e4578063df1f29ee1461021d575b600080fd5b6100d2610240565b6040516100df9190610a30565b60405180910390f35b6100fb6100f6366004610aa1565b610252565b60405190151581526020016100df565b6002545b6040519081526020016100df565b6100fb61012b366004610acb565b610268565b604051601281526020016100df565b6100fb61014d366004610aa1565b610317565b610165610160366004610aa1565b610353565b005b610165610175366004610b07565b610361565b61010f610188366004610b46565b6001600160a01b031660009081526020819052604090205490565b6100d26103b6565b6101656101b9366004610aa1565b6103c3565b6100fb6101cc366004610aa1565b6103cd565b6100fb6101df366004610aa1565b610466565b61010f6101f2366004610b68565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600954600854604080519283526001600160a01b039091166020830152016100df565b606061024d600654610473565b905090565b600061025f33848461054d565b50600192915050565b6000610275848484610672565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156102ff5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b61030c853385840361054d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161025f91859061034e908690610bb1565b61054d565b61035d828261082f565b5050565b6007546001600160a01b03161561037757600080fd5b60078054336001600160a01b031991821617909155600594909455600692909255600880549093166001600160a01b0390921691909117909155600955565b606061024d600554610473565b61035d82826108fc565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561044f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102f6565b61045c338585840361054d565b5060019392505050565b600061025f338484610672565b6060600082900361049257505060408051600081526020810190915290565b600060105b60ff8116156104e957836104ab8284610bdf565b60ff16602081106104be576104be610c04565b1a60f81b6001600160f81b031916156104de576104db8183610bdf565b91505b60011c607f16610497565b5060006104f7826001610bdf565b60ff1667ffffffffffffffff81111561051257610512610bc9565b6040519080825280601f01601f19166020018201604052801561053c576020820181803683370190505b506020810194909452509192915050565b6001600160a01b0383166105af5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102f6565b6001600160a01b0382166106105760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102f6565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166106d65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102f6565b6001600160a01b0382166107385760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102f6565b6001600160a01b038316600090815260208190526040902054818110156107b05760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102f6565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107e7908490610bb1565b92505081905550826001600160a01b0316846001600160a01b0316600080516020610c328339815191528460405161082191815260200190565b60405180910390a350505050565b6001600160a01b0382166108855760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016102f6565b80600260008282546108979190610bb1565b90915550506001600160a01b038216600090815260208190526040812080548392906108c4908490610bb1565b90915550506040518181526001600160a01b03831690600090600080516020610c328339815191529060200160405180910390a35050565b6001600160a01b03821661095c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016102f6565b6001600160a01b038216600090815260208190526040902054818110156109d05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016102f6565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109ff908490610c1a565b90915550506040518281526000906001600160a01b03851690600080516020610c3283398151915290602001610665565b600060208083528351808285015260005b81811015610a5d57858101830151858201604001528201610a41565b81811115610a6f576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610a9c57600080fd5b919050565b60008060408385031215610ab457600080fd5b610abd83610a85565b946020939093013593505050565b600080600060608486031215610ae057600080fd5b610ae984610a85565b9250610af760208501610a85565b9150604084013590509250925092565b60008060008060808587031215610b1d57600080fd5b843593506020850135925060408501359150610b3b60608601610a85565b905092959194509250565b600060208284031215610b5857600080fd5b610b6182610a85565b9392505050565b60008060408385031215610b7b57600080fd5b610b8483610a85565b9150610b9260208401610a85565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610bc457610bc4610b9b565b500190565b634e487b7160e01b600052604160045260246000fd5b600060ff821660ff84168060ff03821115610bfc57610bfc610b9b565b019392505050565b634e487b7160e01b600052603260045260246000fd5b600082821015610c2c57610c2c610b9b565b50039056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c4a2a3f2692dca23d7768e44f4d2b84cb4efbd1c50cc83751d980b791f991b6a64736f6c634300080e0033";

    bytes32 constant internal TEST_TOKEN_TEMPLATE_HASH = keccak256(TEST_TOKEN_TEMPLATE_BYTECODE);

    function deployTestTokenTemplate(TestTokenFactory templateFactory) internal returns (address) {
        // we can use any deterministic salt here, since we don't care about it
        bytes32 salt = TEST_TOKEN_TEMPLATE_SALT;
        // concat bytecode with constructor
        bytes memory bytecode = TEST_TOKEN_TEMPLATE_BYTECODE;
        // deploy contract and store result in result variable
        address result;
        assembly {
            result := create2(0, add(bytecode, 0x20), mload(bytecode), salt)
        }
        require(result != address(0x00), "deploy failed");
        // check that generated contract address is correct
        require(result == simpleTokenTemplateAddress(templateFactory), "address mismatched");
        return result;
    }

    function simpleTokenTemplateAddress(TestTokenFactory templateFactory) internal pure returns (address) {
        bytes32 hash = keccak256(abi.encodePacked(uint8(0xff), address(templateFactory), TEST_TOKEN_TEMPLATE_SALT, TEST_TOKEN_TEMPLATE_HASH));
        return address(bytes20(hash << 96));
    }
}
